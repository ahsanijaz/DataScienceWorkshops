citation()
slidify::slidify("~/Personal/Workshop Machine learning/DataScienceWorkshops/usefulResources-00/usefulResources.Rmd")
install.packages("DiagrammeR")
library(DiagrammeR)

# Create a node data frame
nodes <-
  create_nodes(
    nodes = c("a", "b", "c", "d"),
    label = FALSE,
    type = "lower",
    style = "filled",
    color = "aqua",
    shape = c("circle", "circle",
              "rectangle", "rectangle"),
    data = c(3.5, 2.6, 9.4, 2.7))

edges <-
  create_edges(
    from = c("a", "b", "c"),
    to = c("d", "c", "a"),
    rel = "leading_to")

graph <-
  create_graph(
    nodes_df = nodes,
    edges_df = edges,
    node_attrs = "fontname = Helvetica",
    edge_attrs = c("color = blue",
                   "arrowsize = 2"))
library(DiagrammeR)
nodes <-
  create_nodes(
    nodes = c("a", "b", "c", "d"),
    label = FALSE,
    type = "lower",
    style = "filled",
    color = "aqua",
    shape = c("circle", "circle",
              "rectangle", "rectangle"),
    data = c(3.5, 2.6, 9.4, 2.7))
nodes
edges <-
  create_edges(
    from = c("a", "b", "c"),
    to = c("d", "c", "a"),
    rel = "leading_to")
edges
graph <-
  create_graph(
    nodes_df = nodes,
    edges_df = edges,
    node_attrs = "fontname = Helvetica",
    edge_attrs = c("color = blue",
                   "arrowsize = 2"))
nodes <-
  create_nodes(
    nodes = 1:4,
    type = "number")

# Create a simple EDF
edges <-
  create_edges(
    from = c(1, 1, 3, 1),
    to = c(2, 3, 4, 4),
    rel = "related")

# Create the graph object,
# incorporating the NDF and
# the EDF, and, providing
# some global attributes
graph <-
  create_graph(
    nodes_df = nodes,
    edges_df = edges,
    graph_attrs = "layout = neato",
    node_attrs = "fontname = Helvetica",
    edge_attrs = "color = gray20")

# View the graph
render_graph(graph)
nodes <- create_node_df(

    nodes = 1:4,
    type = "number")
render_graph(
  create_random_graph(n = 2, m = 1),
  output = "visNetwork")
nodes <- create_node_df(
    nodes = 1:4,
    type = "number")
create_node_df(1:4, type = "number")
nodes <- create_node_df(1:4, type = "number")
nodes <- create_node_df(4, type = "number")
nodes
edges <-
  create_edges(
    from = c(1, 1, 3, 1),
    to = c(2, 3, 4, 4),
    rel = "related")
edges
edges <-
edges <-
  create_edge_df(
    from = c(1, 1, 3, 1),
    to = c(2, 3, 4, 4),
    rel = "related")
edges
graph <-
  create_graph(
    nodes_df = nodes,
    edges_df = edges,
    graph_attrs = "layout = neato",
    node_attrs = "fontname = Helvetica",
    edge_attrs = "color = gray20")
graph
graph <-
  create_graph(
    nodes_df = nodes,
    edges_df = edges)
graph
graph <-
  create_graph(
    nodes_df = nodes,
    edges_df = edges) %>%
  render_graph

graph <-
  create_graph(
    nodes_df = nodes,
    edges_df = edges) %>%
  render_graph
graph
library(DiagrammeR)
library(magrittr)

# Create three different graphs
graph_1 <-
  create_graph() %>%
    add_node(1) %>%
    add_node(2) %>%
    add_node(3) %>%
    add_edge(1, 3) %>%
    add_edge(1, 2) %>%
    add_edge(2, 3)

graph_2 <-
  graph_1 %>%
    add_node(4) %>%
    add_edge(4, 3)

graph_3 <-
  graph_2 %>%
    add_node(5) %>%
    add_edge(5, 2)

# Create an empty graph series
series <- create_series(series_type = "sequential")

# Confirm that the series is empty
length(series$graphs)
#> [1] 0

# Add graphs to the graph series
series <- graph_1 %>% add_to_series(series)
series <- graph_2 %>% add_to_series(series)
series <- graph_3 %>% add_to_series(series)
series
series %>% render_graph()
plot(series)
render_graph_from_series(1,series)
series$graphs
render_graph_from_series(1,series$graphs)
render_graph_from_series(graph1)
render_graph_from_series(graph_1)
render_graph_from_series(1,graph_1)
render_graph(graph_1)
render_graph(graph_1,output = "visNetwork")
graph1
graph_1
 graph
render_graph(graph,output = "visNetwork")
